name: '1.0.$(Build.BuildId)'

trigger:
- master

variables:
- name: androidKeystoreKeyAlias
  value: key

jobs:
- job: BuildAndroid
  displayName: Build for Android
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DownloadSecureFile@1
    displayName: Get releaseKeyStore.jks
    name: releaseKeyStore
    inputs:
      secureFile: 'releaseKeyStore.jks'
  - pwsh: |
      Write-Host "##vso[task.setvariable variable=keyAlias;]$(androidKeystoreKeyAlias)"
      Write-Host "##vso[task.setvariable variable=keyPassword;]$(androidKeystoreKeyPassword)"
      Write-Host "##vso[task.setvariable variable=storeFile;]$(releaseKeyStore.secureFilePath)"
      Write-Host "##vso[task.setvariable variable=storePassword;]$(androidKeystorePassword)"
    displayName: "set keystore environment variables"
  - task: DownloadSecureFile@1
    displayName: Get google-services.json
    name: googleServicesJson
    inputs:
      secureFile: 'google-services.json'
  - pwsh: Move-Item $(googleServicesJson.secureFilePath) android/app/ -Force
    displayName: Override google-services.json
  - task: FlutterInstall@0
    displayName: Install Flutter
    inputs:
      channel: 'stable'
      version: 'latest'
  - task: FlutterBuild@0
    displayName: Build App
    inputs:
      target: 'apk'
      projectDirectory: '.'
      buildName: '$(Build.BuildNumber)'
  - task: PublishBuildArtifacts@1
    displayName: Publish artifact
    inputs:
      PathtoPublish: '$(Build.Repository.LocalPath)/build/app/outputs/apk/release'
      ArtifactName: 'apk'
      publishLocation: 'Container'

- job: BuildIOS
  displayName: Build for IOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - task: InstallAppleCertificate@2
    displayName: Install Apple distribution certificate
    inputs:
      certSecureFile: 'distribution.p12'
      certPwd: '$(distribution.p12-password)'
      keychain: 'temp'
  - task: InstallAppleProvisioningProfile@1
    displayName: Install ad-hoc distribution profile
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'Flutter_CI_CD__ad_hoc.mobileprovision'
  - task: DownloadSecureFile@1
    displayName: Get GoogleService-Info.plist
    name: googleServicesInfoPlist
    inputs:
      secureFile: 'GoogleService-Info.plist'
  - pwsh: Move-Item $(googleServicesInfoPlist.secureFilePath) ios/Runner/ -Force
    displayName: Override GoogleService-Info.plist
  - task: FlutterInstall@0
    displayName: Install Flutter
    inputs:
      channel: 'stable'
      version: 'latest'
  - task: FlutterBuild@0
    displayName: Build app
    inputs:
      target: 'ios'
      projectDirectory: '.'
      buildName: '$(Build.BuildNumber)'
      iosCodesign: false
  - task: Xcode@5
    displayName: Package and sign app
    inputs:
      actions: 'build'
      configuration: 'Release'
      sdk: 'iphoneos'
      xcWorkspacePath: 'ios/Runner.xcworkspace'
      scheme: 'Runner'
      packageApp: true
      exportPath: '$(System.ArtifactsDirectory)'
      exportOptions: 'plist'
      exportOptionsPlist: 'ios/exportOptions.plist'
      signingOption: 'manual'
      signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
      provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
  - task: PublishBuildArtifacts@1
    displayName: Publish artifact
    inputs:
      PathtoPublish: '$(System.ArtifactsDirectory)'
      ArtifactName: 'ios'
      publishLocation: 'Container'